links:
    graphs database
        http://users.cecs.anu.edu.au/~bdm/data/graphs.html

possible bugs in previous runs:
    1. if (edgeVal < revLinkCount[num][v]) {
    2. bool isPlus = ((t >> (k - 1)) % 2 == 0);


DOING:
    - planar trees
        - TODO: check packing into universal, or half-complete graphs
    - leaf graphs / not-smooth graphs
    - bipartite graphs
    TODO:
        - universal graphs

TODO:
    - вдохновиться идеями из статей, где доказательства для большИх n
        - например
        - Felix Joos, Jaehoon Kim, Daniela Kühn, Deryk Osthus - Optimal packings of bounded degree trees
            - содержит хорошее описание алгоритма


- Tree Packing Conjecture (not talking about double covers)
    - много вариантов:
        - Matrix Packing Theorem (Fishburn, 1983)
        - {T2, ..., Tn} for Kn (Gyárfás and Lehel, 1976)
        - even case of tree packing (Fishburn, 1983)
            ...
	    - odd case of tree packing (Fishburn, 1983)
            ...
        - {T1,1; ...; Tn,n} for Kn,n (Hollingsworth, 2011)
            Ta,a - balanced tree; both partitions have 'a' vertices
            Kn,n - complete bipartite graph on 2n vertices
        - For all n > 2, any 1-factorization of K2n admits
            a decomposition into rainbow spanning trees (Brualdi and Hollingsworth, 1996)
        - For all n > 2, any 1-factorization of K2n admits
            a decomposition into isomorphic rainbow spanning trees (Constantine, 2002)
        - Graham-Häggkvist conjectures
            - every tree T_{n+1} decomposes every 2n-regular graph
                - Ringel conjecture: every tree T_{n+1} decomposes the K_{2n+1}
                    - Kotzig conjecture: circular decomposition, \rho-labeling
                        - graceful labeling
                            - graceful+ labeling
                                - my conjecture: graceful+seq labeling
            - every tree T_{n+1} decomposes every bipartite n-regular graph
                - every tree T_{n+1} decomposes the Kn,n
                    - circular decomposition: bigraceful labeling
        - Häggkvist conjecture about packing random set of T_{n+1} trees into 2n-regular graphs
            - ? Bottcher, J. Hladky, D. Piguet, and A. Taraz have repeated the conjecture in 2016?
                - Given n ∈ N, suppose \T is a collection of trees such that |T| ≤ n + 1 for all T ∈ \T . If e(\T) ≤ e(K_{2n+1}), then \T packs into K{2n+1}
        - ... my conjectures ...
        - The result of Joos, Kim, Kühn and Osthus is much more general than just Ringel’s conjecture, and in particular their result allows the packing of any collection of bounded degree trees {T1, ..., T_{2n+1}} each on n + 1 vertices into K_{2n+1}
        - ? anything more?


TODO: previous experiments:
    - graceful
        TODO: write out counterexamples
            tree: 0->1; 1->2; 2->3; 2->4; 1->5; 5->6; 0->7; 7->8;
            tree: 0->1; 1->2; 2->3; 0->4; 4->5; 5->6; 0->7; 7->8;
            tree: 0->1; 1->2; 1->3; 0->4; 4->5; 4->6; 0->7; 7->8;
            tree: 0->1; 1->2; 0->3; 3->4; 0->5; 5->6; 0->7; 7->8;
            (а все графы поменьше - звёзды)
    - mod graceful
    - felicitous
    - harmonious
    - мне кажется надо перепроверить код экспериментов
        например вот эта строчка подозрительная для некоторых из раскрасок:
            if (edgeVal < revLinkCount[num][v]) {

TODO:
    - "anti-orientation": beta+, but just checking inequality for vertices, not checking edges
        - ? по идее легко сломается на кейсах "1 большое дерево + звёзды"
    - rainbow packings
        - раскрасить рёбра Kn таким образом, для любого набора всегда найдётся rainbow решение, что все деревья rainbow в наборе
            - хотя мне кажется что это будет не лучше, чем graceful labeling
        - ? а вершины в Kn тоже rainbow или нет?
    - if (edgeVal < revLinkCount[num][v]) {
        это точно не бажная строчка?
            как будто сравниваю вещи разной природы
    - возможно правильнее говорить не о деревьях, а о каком-то superset'е
        - возможно надо его определить через graph minors
        TODO: например, series–parallel graph
        DONE (i think): planar graphs
        ? и необязательно bipartite?
        ? нужно/можно ли передоказать matrix packing theorem для superset'ов?
    ? почему именно деревья? почему не вообще всевозможные связные графы на 1, 2, ..., n-1 ребре?
        - наверно проблема в степенях вершин
        - наверно можно сделать так, что не хватит треугольников в полном графе
        - но тогда скорее всего класс деревьев не получится сильно увеличить
        - на 6 вершинах вроде не ломается, наверно ломается на 7
        - на 7 тоже не смог сходу сломать
        - ага, как минимум проблема в полных графах; вероятно даже на 7 вершинах всё ещё ок (UPD: кажется что не ок)
        - ага, надо вставить несколько полных графов, а потом несколько звёзд
        - ага, кажется на 7 вершинах ломается - вставляем
            - полный граф на 6 рёбер/4 вершины (К4; кстати всё ещё планарный граф даже)
                - кстати, про series-parallel graphs:
                    - 2-connected series–parallel graphs are characterised by having no subgraph homeomorphic to K4
                    - так что возможно для них всё будет ок
            - 2 звезды
            - и дальше снова полный граф

    - TODO: также disconnected graphs? но может это не очень интересно?

    - WONT DO RIGHT NOW: если series-parallel graphs не взлетит, то ещё есть outerplanar graphs
        2 forbidden minors, K4 and K2,3

    - DOING: series-parallel graphs
        контрпример:
        1->0; 2->0; 3->1; 4->2; 4->3;
        1->0; 2->0; 3->1; 3->2;
        1->0; 2->0; 2->1;
        2->0; 2->1; ломается тут - потому что после третьего цикла остаётся только 1-factor
        1->0;
    
    DONE: попробуем запретить использовать звёзды/no stars
        в том числе 3 последних ребра, то есть деревья T2 и T1
        прокатят ли series-parallel графы тогда?
            DONE: нет
            CNT==0
            8 вершин
            profile: 2:0 3:0 4:0 5:1 6:5 7:3 8:0
            trees:
            3->0; 3->1; 3->2; 4->0; 4->1; 4->2; 4->3; 539448320 3669 147 0 0
            1->0; 3->2; 4->0; 4->1; 4->2; 4->3; 539448192 3669 161 0 0
            1->0; 2->0; 3->1; 4->2; 4->3; 539448256 3669 157 0 0
            1->0; 2->0; 3->1; 3->2; 537330736 3669 87 0
            1->0; 2->0; 2->1; 537331264 3669 94
    
        DONE: outerplanar graphs, no stars
            тоже не прокатывают, они есть в контрпримерах
            1->0; 2->0; 3->1; 4->2; 5->4; 6->3; 6->5; - цикл
            1->0; 3->2; 4->0; 4->1; 4->2; 4->3; - 2 цикла склеены в вершине, 3+3
            1->0; 2->0; 3->1; 4->2; 4->3; - цикл
            1->0; 2->0; 3->1; 3->2; - цикл
            1->0; 2->0; 2->1; - цикл
        DONE: это же и cactus graphs
    
    DOING: возможно, если пытаться сделать superset деревьев
        надо разрешить только те (планарные?) графы, где есть листья
            (даже если сюда и не входит цикл длины 3)
            aka "leaf graphs" (назовём их так для удобства)
            или "not-smooth graphs"

        ого, глянул планарные "leaf" графы
        # 1-edged-graphs: 1
        # 2-edged-graphs: 1
        # 3-edged-graphs: 2
        # 4-edged-graphs: 4
        # 5-edged-graphs: 10
        # 6-edged-graphs: 25
        # 7-edged-graphs: 70
        # 8-edged-graphs: 205
        # 9-edged-graphs: 650

        до 8 вершин включительно нет контрпримеров
            впрочем это вообще все connected графы до 8 вершин
        также частично проверил графы на 9 вершинах
            ./all_leaf_graphs_packing 9 27
        DONE: глянуть непланарные графы
            k3,3 + ребро = 10 рёбер
            k5 + ребро = 11 рёбер
        непланарные:
        # 10-edged-graphs: 2158

        проверил до 9 вершин включительно

        TODO: может тут можно какой-то labeling накинуть?

    - DOING: bipartite graph'ы
        вроде тоже всё ок!
        проверил до 9 вершин включительно

TODO: universal graphs
    - e. g., for trees,
        for odd/even cases these could be half-complete graphs (Fishburn)
    - TODO: for planar embeddings of trees
    - TODO: for "leaf" graphs
    - TODO: for bipartite graphs

TODO (? not interesting?):
    - чекнуть идею, что всегда можно найти вершину, которую касаются все деревья
        - и тогда это происходит итеративно
        DONE: не всегда
        dot = new_graph(n)
        add_tree('01,02,13,14', colors[0])
        add_tree('12,23,03', colors[1])
        add_tree('34,04', colors[2])
        add_tree('24', colors[3])
        dot

    - значит такую вершину не всегда можно найти
        - TODO: тогда попробовать усилить гипотезу, типа пускай будет
            - DONE? и попытаться это сделать итеративно
                - а потом глянуть на путь по этим вершинам, из каких рёбер он состоит?


DONE:
    - series-parallel graphs, planar embeddings
        даже если их можно вложить - то планарно не всегда можно
        проблема в длинных циклах


- counting series-parallel graphs
    # edges
        1: 1 tree
        2: 1 tree
        3: 3 graphs; 2 trees + 1 cycle
        4: 5 - 3 trees, 1 4-cycle, 1 3-cycle
            1->0, 2->0, 3->0, 4->0
            1->0, 2->0, 3->0, 4->1
            1->0, 2->1, 3->2, 4->3
            1->0, 2->1, 3->2, 3->0
            1->0, 2->1, 3->2, 3->1
        5: 12 - 6 trees, 1 5-cycle, 1 4-cycle, 1 3+3=4 cycle, 3 3-cycles
        6: 29, 11+18
        7: 77, 23+? (+43, +51) +54!
        8: ...




series-parallel контрпримеры:
6 вершин
CNT==0
profile: 2:0 3:0 4:0 5:1 6:5
trees:
1->0; 2->0; 3->1; 4->2; 4->3; -729967872 52092 144 0 0
1->0; 2->0; 3->1; 3->2; -732053376 52092 39 0
1->0; 2->0; 2->1; -732053312 52092 36
2->0; 2->1; -732053136 52092 13
1->0; -732053168 52092
    3 цикла, 2 пути
CNT==0
profile: 2:0 3:0 4:0 5:2 6:5
trees:
1->0; 2->0; 3->1; 4->2; 4->3; -729968160 52092 153 0 0
    цикл
4->0; 4->1; 4->2; 4->3; -732052736 52092 8 0 0
    звезда
1->0; 2->0; 2->1; -732052752 52092 19
    цикл
2->0; 2->1; -732053088 52092 48
1->0; -732052864 52092

7 вершин
profiles
CNT==0
profile: 2:0 3:0 4:0 5:1 6:6 7:3
trees:
1->0; 3->2; 4->0; 4->1; 4->2; 4->3; 1400017568 56271 152 0 0
    4->1->0->4;
    4->3->2->4; 2 треугольника, склеенные в вершине!
5->0; 5->1; 5->2; 5->3; 5->4; 1400017536 56271 150 0 0 0
    звезда
1->0; 2->0; 3->1; 3->2; 1397933040 56271 47 0
    цикл
1->0; 2->0; 2->1; 1397932768 56271 27
2->0; 2->1; 1397932624 56271 64
1->0; 1397932752 56271
CNT==0
profile: 2:0 3:0 4:0 5:1 6:9 7:3
trees:
1->0; 3->2; 4->0; 4->1; 4->2; 4->3; 1399980160 56271 1 0 0
4->0; 4->3; 5->1; 5->2; 5->4; 1399980128 56271 0 0 0 0
1->0; 2->0; 3->1; 3->2; 1397899424 56271 6 0
1->0; 2->0; 2->1; 1397899344 56271 10
2->0; 2->1; 1397899488 56271 11
1->0; 1397899392 56271
CNT==0
profile: 2:0 3:0 4:0 5:1 6:5 7:14
trees:
3->0; 4->1; 4->3; 5->2; 5->3; 5->4; 1399980128 56271 1 0 0 0
1->0; 2->0; 3->1; 4->2; 4->3; 1399980096 56271 0 0 0
1->0; 2->0; 3->1; 3->2; 1397899472 56271 4 0
1->0; 2->0; 2->1; 1397899440 56271 14
2->0; 2->1; 1397899312 56271 3
1->0; 1397899344 56271
CNT==0
profile: 2:0 3:0 4:0 5:1 6:6 7:17
trees:
1->0; 2->0; 3->1; 4->2; 5->3; 5->4; 1400017536 56271 145 0 0 0
5->0; 5->1; 5->2; 5->3; 5->4; 1400017696 56271 149 0 0 0
1->0; 2->0; 3->1; 3->2; 1397933088 56271 31 0
1->0; 2->0; 2->1; 1397932624 56271 67
2->0; 2->1; 1397932752 56271 38
1->0; 1397933072 56271
CNT==0
profile: 2:0 3:0 4:0 5:1 6:9 7:17
trees:
1->0; 2->0; 3->1; 4->2; 5->3; 5->4; 1400017536 56271 144 0 0 0
4->0; 4->3; 5->1; 5->2; 5->4; 1400017728 56271 149 0 0 0
1->0; 2->0; 3->1; 3->2; 1397932912 56271 59 0
1->0; 2->0; 2->1; 1397932768 56271 56
2->0; 2->1; 1397933072 56271 47
1->0; 1397933200 56271
CNT==0
profile: 2:0 3:0 4:0 5:1 6:5 7:18
trees:
6->0; 6->1; 6->2; 6->3; 6->4; 6->5; 1400017568 56271 154 0 0 0 0
1->0; 2->0; 3->1; 4->2; 4->3; 1400017408 56271 150 0 0
1->0; 2->0; 3->1; 3->2; 1397932224 56271 27 0
1->0; 2->0; 2->1; 1397932960 56271 13
2->0; 2->1; 1397933104 56271 64
1->0; 1397933040 56271
CNT==0
profile: 2:0 3:0 4:0 5:2 6:5 7:18
trees:
6->0; 6->1; 6->2; 6->3; 6->4; 6->5; 1400029248 56271 4 0 0 0 0
1->0; 2->0; 3->1; 4->2; 4->3; 1400029408 56271 3 0 0
4->0; 4->1; 4->2; 4->3; 1397883104 56271 8 0 1397883120
1->0; 2->0; 2->1; 1397882976 56271 15
2->0; 2->1; 1397883072 56271 12
1->0; 1397883056 56271
CNT==0
profile: 2:0 3:0 4:0 5:1 6:5 7:20
trees:
5->0; 6->1; 6->2; 6->3; 6->4; 6->5; 1400017728 56271 144 0 0 0 0
1->0; 2->0; 3->1; 4->2; 4->3; 1400017696 56271 155 0 0
1->0; 2->0; 3->1; 3->2; 1397933104 56271 47 0
1->0; 2->0; 2->1; 1397933040 56271 75
2->0; 2->1; 1397933216 56271 68
1->0; 1397933072 56271
CNT==0
profile: 2:0 3:0 4:0 5:2 6:5 7:20
trees:
5->0; 6->1; 6->2; 6->3; 6->4; 6->5; 1400017376 56271 154 0 0 0 0
1->0; 2->0; 3->1; 4->2; 4->3; 1400017728 56271 144 0 0
4->0; 4->1; 4->2; 4->3; 1397933200 56271 44 0 1397933216
1->0; 2->0; 2->1; 1397933088 56271 27
2->0; 2->1; 1397932448 56271 74
1->0; 1397932736 56271
CNT==0
profile: 2:0 3:0 4:0 5:1 6:5 7:21
trees:
5->0; 5->3; 5->4; 6->1; 6->2; 6->4; 1399980160 56271 1 0 0 0 0
1->0; 2->0; 3->1; 4->2; 4->3; 1399980128 56271 0 0 0
1->0; 2->0; 3->1; 3->2; 1397899280 56271 6 0
1->0; 2->0; 2->1; 1397899472 56271 2
2->0; 2->1; 1397899536 56271 14
1->0; 1397899456 56271
CNT==0
profile: 2:0 3:0 4:0 5:1 6:5 7:22
trees:
5->0; 5->1; 6->2; 6->3; 6->4; 6->5; 1399980128 56271 1 0 0 0 0
1->0; 2->0; 3->1; 4->2; 4->3; 1399980096 56271 0 0 0
1->0; 2->0; 3->1; 3->2; 1397899520 56271 16 0
1->0; 2->0; 2->1; 1397899344 56271 18
2->0; 2->1; 1397899552 56271 6
1->0; 1397899536 56271
CNT==0
profile: 2:0 3:0 4:0 5:2 6:5 7:22
trees:
5->0; 5->1; 6->2; 6->3; 6->4; 6->5; 1399980096 56271 1 0 0 0 0
1->0; 2->0; 3->1; 4->2; 4->3; 1399980064 56271 2043 0 0
4->0; 4->1; 4->2; 4->3; 1397899376 56271 12 0 1397899392
1->0; 2->0; 2->1; 1397899424 56271 9
2->0; 2->1; 1397899472 56271 11
1->0; 1397899392 56271
CNT==0
profile: 2:0 3:0 4:0 5:1 6:5 7:25
trees:
4->0; 5->1; 5->4; 6->2; 6->3; 6->5; 1400017408 56271 144 0 0 0 0
1->0; 2->0; 3->1; 4->2; 4->3; 1400017696 56271 145 0 0
1->0; 2->0; 3->1; 3->2; 1397933040 56271 75 0
1->0; 2->0; 2->1; 1397932768 56271 64
2->0; 2->1; 1397933216 56271 44
1->0; 1397932784 56271



если no T2, no T1:
CNT==0
profile: 2:0 3:0 4:0 5:1 6:6 7:3
trees:
1->0; 3->2; 4->0; 4->1; 4->2; 4->3; 1059962944 57384 7 0 0
5->0; 5->1; 5->2; 5->3; 5->4; 1059963040 57384 3 0 0 0
    звезда
1->0; 2->0; 3->1; 3->2; 1057816848 57384 4 0
1->0; 2->0; 2->1; 1057816624 57384 5
CNT==0
profile: 2:0 3:0 4:0 5:1 6:6 7:17
trees:
1->0; 2->0; 3->1; 4->2; 5->3; 5->4; 1059864768 57384 2 0 0 0
5->0; 5->1; 5->2; 5->3; 5->4; 1059864736 57384 7 0 0 0
    звезда
1->0; 2->0; 3->1; 3->2; 1057980640 57384 28 0
1->0; 2->0; 2->1; 1057980816 57384 15
CNT==0
profile: 2:0 3:0 4:0 5:2 6:5 7:18
trees:
6->0; 6->1; 6->2; 6->3; 6->4; 6->5; 1059864736 57384 2 0 0 0 0
1->0; 2->0; 3->1; 4->2; 4->3; 1059864800 57384 6 0 0
4->0; 4->1; 4->2; 4->3; 1057980848 57384 14 0 1057980864
    звезда
1->0; 2->0; 2->1; 1057980768 57384 28
CNT==0
profile: 2:0 3:0 4:0 5:2 6:5 7:20
trees:
5->0; 6->1; 6->2; 6->3; 6->4; 6->5; 1059864736 57384 8 0 0 0 0
1->0; 2->0; 3->1; 4->2; 4->3; 1059864608 57384 6 0 0
4->0; 4->1; 4->2; 4->3; 1057980560 57384 29 0 0
    звезда
1->0; 2->0; 2->1; 1057980688 57384 13
CNT==0
profile: 2:0 3:0 4:0 5:2 6:5 7:22
trees:
5->0; 5->1; 6->2; 6->3; 6->4; 6->5; 1059864800 57384 6 0 0 0 0
1->0; 2->0; 3->1; 4->2; 4->3; 1059864832 57384 8 0 0
4->0; 4->1; 4->2; 4->3; 1057980640 57384 13 0 1057980656
    звезда
1->0; 2->0; 2->1; 1057980896 57384 10



no stars, series-parallel
    но также тут есть и чисто outerplanar примеры
CNT==0
profile: 2:0 3:0 4:0 5:1 6:5 7:3 8:0
trees:
3->0; 3->1; 3->2; 4->0; 4->1; 4->2; 4->3; 539448320 3669 147 0 0
1->0; 3->2; 4->0; 4->1; 4->2; 4->3; 539448192 3669 161 0 0
1->0; 2->0; 3->1; 4->2; 4->3; 539448256 3669 157 0 0
1->0; 2->0; 3->1; 3->2; 537330736 3669 87 0
1->0; 2->0; 2->1; 537331264 3669 94
CNT==0
profile: 2:0 3:0 4:0 5:1 6:5 7:17 8:0
trees:
3->0; 3->1; 3->2; 4->0; 4->1; 4->2; 4->3; 539448320 3669 162 0 0
1->0; 2->0; 3->1; 4->2; 5->3; 5->4; 539447872 3669 161 0 0 0
1->0; 2->0; 3->1; 4->2; 4->3; 539448192 3669 147 0 0
1->0; 2->0; 3->1; 3->2; 537331040 3669 94 0
1->0; 2->0; 2->1; 537331696 3669 62
CNT==0
profile: 2:0 3:0 4:0 5:1 6:5 7:3 8:9
trees:
3->2; 4->0; 4->1; 5->0; 5->1; 5->2; 5->3; 539459744 3669 1 0 0 0
1->0; 3->2; 4->0; 4->1; 4->2; 4->3; 539459712 3669 6 0 0
1->0; 2->0; 3->1; 4->2; 4->3; 539459680 3669 0 0 0
1->0; 2->0; 3->1; 3->2; 537280736 3669 1 0
1->0; 2->0; 2->1; 537280720 3669 15
CNT==0
profile: 2:0 3:0 4:0 5:1 6:5 7:17 8:9
trees:
3->2; 4->0; 4->1; 5->0; 5->1; 5->2; 5->3; 539459712 3669 1 0 0 0
1->0; 2->0; 3->1; 4->2; 5->3; 5->4; 539459680 3669 5 0 0 0
1->0; 2->0; 3->1; 4->2; 4->3; 539459648 3669 0 0 0
1->0; 2->0; 3->1; 3->2; 537280784 3669 1 0
1->0; 2->0; 2->1; 537280768 3669 18
CNT==0
profile: 2:0 3:0 4:0 5:1 6:5 7:3 8:53
trees:
1->0; 2->0; 3->1; 4->2; 5->4; 6->3; 6->5; 539448192 3669 164 0 0 0 0
1->0; 3->2; 4->0; 4->1; 4->2; 4->3; 539447872 3669 157 0 0
1->0; 2->0; 3->1; 4->2; 4->3; 539448160 3669 147 0 0
1->0; 2->0; 3->1; 3->2; 537331296 3669 93 0
1->0; 2->0; 2->1; 537331232 3669 103
CNT==0
profile: 2:0 3:0 4:0 5:1 6:5 7:17 8:53
trees:
1->0; 2->0; 3->1; 4->2; 5->4; 6->3; 6->5; 539459680 3669 1 0 0 0 0
1->0; 2->0; 3->1; 4->2; 5->3; 5->4; 539459648 3669 4 0 0 0
1->0; 2->0; 3->1; 4->2; 4->3; 539459616 3669 0 0 0
1->0; 2->0; 3->1; 3->2; 537280800 3669 14 0
1->0; 2->0; 2->1; 537280560 3669 19


ОДНА ТОЛЬКО ПРОБЛЕМА:
    - что самые интересные кейсы начинаются с n=7 и выше
    - но перебор становится довольно медленный

